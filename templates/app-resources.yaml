AWSTemplateFormatVersion: '2010-09-09'
Description: Complete E-commerce Serverless Infrastructure

Parameters:
  EnvType:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
  FrontendDomain:
    Type: String
    Default: "example.com"
  LambdaDeploymentBucket:
    Type: String
    Description: S3 bucket containing Lambda deployment packages
  LambdaSourcePrefix:
    Type: String
    Default: "backend"
    Description: S3 prefix for Lambda deployment packages

Resources:
  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ecommerce-userpool-${EnvType}
      AutoVerifiedAttributes: [email]
      UsernameAttributes: [email]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ecommerce-client-${EnvType}
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      AllowedOAuthFlows: [implicit]
      AllowedOAuthScopes: [email, openid, profile]
      CallbackURLs: [!Sub https://${FrontendDomain}]
      LogoutURLs: [!Sub https://${FrontendDomain}]
      SupportedIdentityProviders: [COGNITO]
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  # DynamoDB Tables
  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub products-${EnvType}
      AttributeDefinitions:
        - AttributeName: "productId"
          AttributeType: "S"
        - AttributeName: "category"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "productId"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: "CategoryIndex"
          KeySchema:
            - AttributeName: "category"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"

  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub orders-${EnvType}
      AttributeDefinitions:
        - AttributeName: "orderId"
          AttributeType: "S"
        - AttributeName: "userId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "orderId"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: "UserIndex"
          KeySchema:
            - AttributeName: "userId"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
      BillingMode: PAY_PER_REQUEST

  # ElasticSearch Domain
  SearchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: !Sub product-search-${EnvType}
      ElasticsearchVersion: "7.10"
      ElasticsearchClusterConfig:
        InstanceType: "t3.small.elasticsearch"
        InstanceCount: 1
      EBSOptions:
        EBSEnabled: true
        VolumeType: "gp2"
        VolumeSize: 10
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: "es:*"
            Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/product-search-${EnvType}/*"

  # SNS Topic
  OrderNotificationsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub order-notifications-${EnvType}
      DisplayName: "Order Notifications"

  # SQS Queue
  OrderProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub order-processing-queue-${EnvType}
      VisibilityTimeout: 300

  # Frontend Hosting
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ecommerce-frontend-${AWS::AccountId}-${AWS::Region}
      WebsiteConfiguration:
        IndexDocument: "index.html"
        ErrorDocument: "error.html"
      AccessControl: "PublicRead"

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${FrontendBucket.Arn}/*"

  FrontendDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt FrontendBucket.DomainName
            Id: "S3Origin"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: "http-only"
        Enabled: true
        DefaultRootObject: "index.html"
        DefaultCacheBehavior:
          TargetOriginId: "S3Origin"
          ViewerProtocolPolicy: "redirect-to-https"
          AllowedMethods: ["GET", "HEAD"]
          CachedMethods: ["GET", "HEAD"]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: "none"
        PriceClass: "PriceClass_100"
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ecommerce-api-${EnvType}
      Description: "E-commerce API Gateway"

  # Lambda Roles
  AuthLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ["lambda.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: "CognitoAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cognito-idp:AdminCreateUser"
                  - "cognito-idp:AdminSetUserPassword"
                  - "cognito-idp:AdminInitiateAuth"
                Resource: !GetAtt UserPool.Arn
        - PolicyName: "LambdaBasicExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  ProductLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ["lambda.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: "DynamoDBAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                Resource: !GetAtt ProductsTable.Arn
        - PolicyName: "ElasticSearchAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "es:ESHttpPost"
                  - "es:ESHttpGet"
                Resource: !Sub "${SearchDomain.Arn}/*"
        - PolicyName: "LambdaBasicExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  OrderLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ["lambda.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: "OrderTableAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                Resource: !GetAtt OrdersTable.Arn
        - PolicyName: "SQSAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sqs:SendMessage"
                Resource: !GetAtt OrderProcessingQueue.Arn
        - PolicyName: "SNSAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource: !Ref OrderNotificationsTopic
        - PolicyName: "LambdaBasicExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  # Lambda Functions (now referencing external code)
  AuthLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub auth-service-${EnvType}
      Description: "Handles user authentication"
      Runtime: "nodejs14.x"
      Handler: "src/auth/handler.handler"
      Role: !GetAtt AuthLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaDeploymentBucket
        S3Key: !Sub "${LambdaSourcePrefix}/${EnvType}/auth-service.zip"
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient

  ProductLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub product-service-${EnvType}
      Description: "Handles product operations"
      Runtime: "nodejs14.x"
      Handler: "src/products/handler.handler"
      Role: !GetAtt ProductLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaDeploymentBucket
        S3Key: !Sub "${LambdaSourcePrefix}/${EnvType}/product-service.zip"
      Environment:
        Variables:
          PRODUCTS_TABLE: !Ref ProductsTable
          ES_ENDPOINT: !GetAtt SearchDomain.DomainEndpoint

  OrderLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub order-service-${EnvType}
      Description: "Handles order processing"
      Runtime: "nodejs14.x"
      Handler: "src/orders/handler.handler"
      Role: !GetAtt OrderLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaDeploymentBucket
        S3Key: !Sub "${LambdaSourcePrefix}/${EnvType}/order-service.zip"
      Environment:
        Variables:
          ORDERS_TABLE: !Ref OrdersTable
          QUEUE_URL: !Ref OrderProcessingQueue
          TOPIC_ARN: !Ref OrderNotificationsTopic

  # API Gateway Resources and Methods
  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "auth"
      RestApiId: !Ref ApiGateway

  ProductsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "products"
      RestApiId: !Ref ApiGateway

  OrdersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "orders"
      RestApiId: !Ref ApiGateway

  # API Gateway Methods
  ApiGatewayMethodAuth:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: "POST"
      ResourceId: !Ref AuthResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: "NONE"
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLambda.Arn}/invocations"

  ApiGatewayMethodProducts:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: "GET"
      ResourceId: !Ref ProductsResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductLambda.Arn}/invocations"

  ApiGatewayMethodOrders:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: "POST"
      ResourceId: !Ref OrdersResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OrderLambda.Arn}/invocations"

  # API Gateway Authorizer
  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: "CognitoAuthorizer"
      Type: "COGNITO_USER_POOLS"
      IdentitySource: "method.request.header.Authorization"
      RestApiId: !Ref ApiGateway
      ProviderARNs: [!GetAtt UserPool.Arn]

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethodAuth
      - ApiGatewayMethodProducts
      - ApiGatewayMethodOrders
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref EnvType

  # Lambda Permissions
  AuthLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt AuthLambda.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/auth"

  ProductLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt ProductLambda.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/products"

  OrderLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt OrderLambda.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/orders"

Outputs:
  UserPoolId:
    Value: !Ref UserPool
  UserPoolClientId:
    Value: !Ref UserPoolClient
  ApiGatewayUrl:
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${EnvType}"
  SearchDomainEndpoint:
    Value: !GetAtt SearchDomain.DomainEndpoint
  FrontendURL:
    Value: !GetAtt FrontendDistribution.DomainName
  WebsiteURL:
    Value: !Sub "https://${FrontendDistribution}"