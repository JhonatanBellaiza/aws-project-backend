AWSTemplateFormatVersion: '2010-09-09'
Description: E-commerce backend infrastructure
Parameters:
  EnvType:
    Type: String
    Description: Environment type (dev, staging, prod)
    AllowedValues:
    - dev
    - staging
    - prod
    Default: dev
  LambdaDeploymentBucket:
    Type: String
    Description: S3 bucket for Lambda deployment packages
Resources:
  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: products-${EnvType}
      AttributeDefinitions:
      - AttributeName: productId
        AttributeType: S
      KeySchema:
      - AttributeName: productId
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName:
        Fn::Sub: orders-${EnvType}
      AttributeDefinitions:
      - AttributeName: orderId
        AttributeType: S
      - AttributeName: userId
        AttributeType: S
      KeySchema:
      - AttributeName: orderId
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: UserIdIndex
        KeySchema:
        - AttributeName: userId
          KeyType: HASH
        Projection:
          ProjectionType: ALL
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: ecommerce-users-${EnvType}
      AutoVerifiedAttributes:
      - email
      UsernameAttributes:
      - email
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        Fn::Sub: ecommerce-client-${EnvType}
      UserPoolId:
        Ref: UserPool
      GenerateSecret: true
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
      - implicit
      AllowedOAuthScopes:
      - email
      - openid
      - profile
      CallbackURLs:
      - https://example.com/callback
      LogoutURLs:
      - https://example.com/logout
      SupportedIdentityProviders:
      - COGNITO
  OrderNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::Sub: order-notifications-${EnvType}
  OrderProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Sub: order-processing-${EnvType}
      VisibilityTimeout: 300
  AuthLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: auth-${EnvType}
      Handler: handler.handler
      Runtime: nodejs18.x
      Code:
        S3Bucket:
          Ref: LambdaDeploymentBucket
        S3Key:
          Fn::Sub: backend/${EnvType}/auth.zip
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: UserPool
          USER_POOL_CLIENT_ID:
            Ref: UserPoolClient
          USER_POOL_CLIENT_SECRET:
            Fn::GetAtt:
            - UserPoolClient
            - ClientSecret
  ProductsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: products-${EnvType}
      Handler: handler.handler
      Runtime: nodejs18.x
      Code:
        S3Bucket:
          Ref: LambdaDeploymentBucket
        S3Key:
          Fn::Sub: backend/${EnvType}/products.zip
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Environment:
        Variables:
          PRODUCTS_TABLE:
            Ref: ProductsTable
          ES_ENDPOINT: not-used
  OrdersLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: orders-${EnvType}
      Handler: handler.handler
      Runtime: nodejs18.x
      Code:
        S3Bucket:
          Ref: LambdaDeploymentBucket
        S3Key:
          Fn::Sub: backend/${EnvType}/orders.zip
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Environment:
        Variables:
          ORDERS_TABLE:
            Ref: OrdersTable
          TOPIC_ARN:
            Ref: OrderNotificationTopic
          QUEUE_URL:
            Ref: OrderProcessingQueue
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Sub: ecommerce-api-${EnvType}
      Description: E-commerce API
  AuthApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - ApiGateway
        - RootResourceId
      PathPart: auth
      RestApiId:
        Ref: ApiGateway
  ProductsApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - ApiGateway
        - RootResourceId
      PathPart: products
      RestApiId:
        Ref: ApiGateway
  OrdersApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - ApiGateway
        - RootResourceId
      PathPart: orders
      RestApiId:
        Ref: ApiGateway
  AuthApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId:
        Ref: AuthApiResource
      RestApiId:
        Ref: ApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLambda.Arn}/invocations
  ProductsApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: ProductsApiResource
      RestApiId:
        Ref: ApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductsLambda.Arn}/invocations
  OrdersApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId:
        Ref: OrdersApiResource
      RestApiId:
        Ref: ApiGateway
      AuthorizationType: AWS_IAM
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OrdersLambda.Arn}/invocations
  AuthLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - AuthLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/auth
  ProductsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - ProductsLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/products
  OrdersLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - OrdersLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/orders
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - AuthApiMethod
    - ProductsApiMethod
    - OrdersApiMethod
    Properties:
      RestApiId:
        Ref: ApiGateway
      StageName:
        Ref: EnvType
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ecommerce-lambda-role-${EnvType}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Sub: ecommerce-lambda-policy-${EnvType}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:*
            - cognito-idp:*
            - sns:Publish
            - sqs:SendMessage
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
Outputs:
  ApiGatewayUrl:
    Description: URL of the API Gateway
    Value:
      Fn::Sub: https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${EnvType}
  UserPoolId:
    Description: Cognito User Pool ID
    Value:
      Ref: UserPool
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value:
      Ref: UserPoolClient
